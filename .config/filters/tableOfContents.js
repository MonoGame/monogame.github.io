'use strict';

const slugify = require('@11ty/eleventy/src/Filters/Slugify');

function markActiveChildItems(item, slug) {
    if (item.items) {
        item.hasActiveChild = item.items.some(child => {
            if (child.items) {
                markActiveChildItems(child, slug);
                return child.hasActiveChild;
            } else {
                return child.href && slug === child.href.split('/').pop();
            }
        });
    }
}

function isItemActive(item, basePath, slug) {
    return item.href ? slug === item.href.split('/').pop() : basePath === slug;
}

function generateGroupHtml(item, basePath, slug) {
    //  Generate the HTML id attr value to apply to this toc item's group
    //  based on the name of the item.  `toc` is prepended so that it doesn't
    //  conflict with any autogenerated header IDs in the page's document.
    const groupID = `toc-${slugify(item.name.replace(/\d+/g, ''))}`

    markActiveChildItems(item, slug);

    return `<li class="nav-item w-100">
                <a class="nav-link text-break ${item.hasActiveChild ? 'active' : ''}"
                   data-bs-toggle="collapse"
                   data-bs-target="#${groupID}"
                   aria-expanded="${item.hasActiveChild ? 'true' : 'false'}"
                   aria-controls="${groupID}"
                   href="/${basePath}/${item.href ?? ''}">
                   ${item.name.split('.').join('<wbr />.')}
                </a>
                <div id="${groupID}"
                     class="${item.hasActiveChild ? 'active' : ''} collapse ${item.hasActiveChild ? 'show' : ''}"
                     data-bs-parent="#${groupID}">
                    <ul class="nav flex-column ps-3">
                        ${item.items.map((child) => generateItemHtml(child, basePath, slug)).join('')}
                    </ul>
                </div>
            </li>`
}

function generateItemHtml(item, basePath, slug) {
    return item.items ? generateGroupHtml(item, basePath, slug) : 
    `<li class="nav-item w-100">
        <a class="nav-link text-break ${isItemActive(item, basePath, slug) ? 'active' : ''}"
        href="/${basePath}/${item.href ?? ''}">${item.name.split('.').join('<wbr/>.')}</a>
    </li>`
}

module.exports = function(toc, currentPage) {
    if (!toc || !currentPage) { return ''; }

    //  The items collection needs to be cloned so we're not editing the
    //  original collection which can cause issues with the toc generation on
    //  other pages which rely on the same collection
    let items = JSON.parse(JSON.stringify(toc));

    //  let's say the page being generated is at the following url
    //
    //  https://example.com/documents/introduction/
    //
    //  We can use the filePathStem to get the `/documents/introduction` part
    //  of the path.  Splitting that on the `/` character and then taking index
    //  1 we can get the name of the base of the path
    let basePath = currentPage.filePathStem.split('/')[1];

    //  The fileSlug is the end fo the filePathStem. From the example above, the
    //  file slug would be `introduction`
    let slug = currentPage.fileSlug;

    return `<nav class="navbar navbar-vertical navbar-expand-lg toc" aria-label="Offcanvas Table of Contents">
                <button class="btn btn-lg border-0 d-lg-none" 
                        type="button" 
                        data-bs-toggle="offcanvas"
                        data-bs-target="#tableOfContents"
                        aria-controls="tableOfContents"
                        aria-expanded="false"
                        aria-label="Toggle Table of Contents">
                        <i class="bi bi-list"></i>
                </button>
                <div id="tableOfContents" class="offcanvas offcanvas-start" aria-labelledby="tableOfContentsLabel">
                    <div class="offcanvas-header">
                        <h5 class="offcanvas-title" id="tableOfContentsLabel">Table of Contents</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                    </div>
                    <div class="offcanvas-body d-block">
                        <form class="filter">
                            <i class="bi bi-filter"></i>
                            <input id="toc-filter" class="form-control" type="search" autocomplete="off" value="" placeholder="Filter by title" aria-label="Filter by title">
                        </form>
                        <ul class="nav flex-column nav-verticle w-100">
                            ${items.map((item) => generateItemHtml(item, basePath, slug)).join('')}
                        </ul>
                    </div>
                </div>
            </nav>`;    
}
